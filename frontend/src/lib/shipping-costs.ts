export const SHIPPING_COSTS_ZONES = {
    CABA: {
        codigos_postales: [
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1066",
            "1067",
            "1068",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1236",
            "1237",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1414",
            "1416",
            "1417",
            "1419",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1437",
            "1439",
            "1440",
        ],
        precio: 4235.0,
    },
    CABA_GBA_ZONA_1: {
        codigos_postales: [
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1609",
            "1636",
            "1638",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1646",
            "1647",
            "1650",
            "1651",
            "1653",
            "1655",
            "1672",
            "1674",
            "1676",
            "1678",
            "1682",
            "1684",
            "1686",
            "1688",
            "1702",
            "1704",
            "1706",
            "1707",
            "1708",
            "1712",
            "1713",
            "1714",
            "1715",
            "1752",
            "1754",
            "1755",
            "1766",
            "1822",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1832",
            "1834",
            "1836",
            "1870",
            "1872",
            "1873",
            "1874",
            "1875",
        ],
        precio: 7260.0,
    },
    CABA_GBA_ZONA_2: {
        codigos_postales: [
            "1612",
            "1613",
            "1615",
            "1617",
            "1618",
            "1619",
            "1648",
            "1649",
            "1659",
            "1661",
            "1663",
            "1664",
            "1665",
            "1667",
            "1670",
            "1671",
            "1716",
            "1718",
            "1722",
            "1723",
            "1724",
            "1742",
            "1744",
            "1746",
            "1757",
            "1759",
            "1763",
            "1765",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1842",
            "1845",
            "1846",
            "1847",
            "1849",
            "1852",
            "1854",
            "1856",
            "1878",
            "1879",
            "1880",
            "1881",
            "1882",
            "1883",
            "1884",
            "1885",
            "1886",
            "1888",
            "1889",
            "1891",
        ],
        precio: 9680.0,
    },
    CABA_GBA_ZONA_3: {
        codigos_postales: [
            "1621",
            "1623",
            "1625",
            "1629",
            "1630",
            "1631",
            "1635",
            "1669",
            "1727",
            "1748",
            "1814",
            "1815",
            "1862",
            "1864",
            "1865",
            "1894",
            "1896",
            "1897",
            "1900",
            "1901",
            "1902",
            "1903",
            "1904",
            "1906",
            "1923",
            "1925",
            "2800",
            "2804",
            "6700",
            "6701",
            "6703",
        ],
        precio: 12100.0,
    },
    INTERIOR_ZONA_A: {
        codigos_postales: [
            "2000 - 2300",
            "2440 - 2520",
            "3000 - 3080", // Santa Fe
            "2354 - 2357",
            "3740 - 3763",
            "4184 - 4354", // Santiago del Estero
            "2820 - 2840",
            "3100 - 3280", // Entre Ríos
            "3300 - 3384", // Misiones
            "3400 - 3485", // Corrientes
            "3500 - 3541",
            "3700 - 3734", // Chaco
            "3600 - 3636", // Formosa
            "4000 - 4178", // Tucumán
            "4400 - 4651", // Salta
            "4500 - 4514",
            "4600 - 4655", // Jujuy
            "4700 - 4750", // Catamarca
            "5300 - 5386", // La Rioja
            "5400 - 5467", // San Juan
            "5500 - 5620", // Mendoza
            "5700 - 5883", // San Luis
            "6200 - 6221",
            "6300 - 6387",
            "8200 - 8307", // La Pampa
            "8300 - 8407", // Neuquén (Ojo: 8300-8307 se solapa con La Pampa)
            "8400 - 8536", // Río Negro
            "9000 - 9220", // Chubut
            "9300 - 9407", // Tierra del Fuego (asumo)
        ],
        precio: 800.0,
    },
    DEFAULT: {
        precio: 4000.0,
    },
};

// Función para calcular el costo de envío basado en código postal
export const calcularCostoEnvio = (codigoPostal: string): number => {
    if (!codigoPostal) return SHIPPING_COSTS_ZONES.DEFAULT.precio;

    // Comprobar si el código postal está en CABA
    if (SHIPPING_COSTS_ZONES.CABA.codigos_postales.includes(codigoPostal)) {
        return SHIPPING_COSTS_ZONES.CABA.precio;
    }

    // Comprobar si el código postal está en CABA_GBA_ZONA_1
    if (
        SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_1.codigos_postales.includes(
            codigoPostal
        )
    ) {
        return SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_1.precio;
    }

    // Comprobar si el código postal está en CABA_GBA_ZONA_2
    if (
        SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_2.codigos_postales.includes(
            codigoPostal
        )
    ) {
        return SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_2.precio;
    }

    // Comprobar si el código postal está en CABA_GBA_ZONA_3
    if (
        SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_3.codigos_postales.includes(
            codigoPostal
        )
    ) {
        return SHIPPING_COSTS_ZONES.CABA_GBA_ZONA_3.precio;
    }

    // Para el interior, necesitamos comprobar rangos
    // Nota: Esto es una simplificación, idealmente implementaríamos una lógica más robusta para los rangos
    for (const rangoCP of SHIPPING_COSTS_ZONES.INTERIOR_ZONA_A
        .codigos_postales) {
        // Si es un rango (contiene un guión)
        if (rangoCP.includes(" - ")) {
            const [inicio, fin] = rangoCP.split(" - ");
            const cpNum = parseInt(codigoPostal, 10);
            const inicioNum = parseInt(inicio, 10);
            const finNum = parseInt(fin, 10);

            if (cpNum >= inicioNum && cpNum <= finNum) {
                return SHIPPING_COSTS_ZONES.INTERIOR_ZONA_A.precio;
            }
        }
    }

    // Si no coincide con ninguna zona, usar el precio por defecto
    return SHIPPING_COSTS_ZONES.DEFAULT.precio;
};
